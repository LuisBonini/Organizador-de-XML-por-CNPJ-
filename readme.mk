# üöÄ Organizador Fiscal de XMLs

Uma aplica√ß√£o de desktop (feita em Python e Streamlit) que processa lotes de arquivos XML de NF-e, organiza os dados por CNPJ e gera relat√≥rios gerenciais detalhados em Excel automaticamente.

Este projeto foi criado para automatizar a consolida√ß√£o fiscal para empresas ou escrit√≥rios de contabilidade que gerenciam m√∫ltiplos CNPJs, transformando um trabalho de horas em segundos.

![GIF da Aplica√ß√£o](httpsData/app-demo.gif)
*(Dica: Grave um GIF curto da tela do Streamlit e coloque aqui.)*

---

## ‚ú® Funcionalidades

* **Interface Gr√°fica Amig√°vel:** Constru√≠do com Streamlit para ser uma aplica√ß√£o web local f√°cil de usar, com upload de arquivos "arraste e solte".
* **Gerenciamento Multi-CNPJ:** Processa os XMLs de forma inteligente, identificando se a nota √© de entrada ou sa√≠da com base em uma lista de CNPJs cadastrados.
* **Cadastro de CNPJs:** Uma tela de "Configura√ß√µes" permite ao usu√°rio adicionar ou remover os CNPJs da empresa sem mexer no c√≥digo (salvos em `cnpjs_config.json`).
* **Relat√≥rios Detalhados por CNPJ:** Gera um arquivo Excel separado para cada CNPJ da empresa encontrado nos XMLs.
* **Abas Organizadas:** Cada Excel gerado cont√©m 6 abas:
    1.  `1. Vendas por Cliente` (Resumo)
    2.  `2. Compras por Fornecedor` (Resumo)
    3.  `3. Total Sa√≠das (Notas)` (Detalhe por Nota)
    4.  `4. Total Entradas (Notas)` (Detalhe por Nota)
    5.  `5. Detalhe Sa√≠das (Itens)` (Detalhe por Item)
    6.  `6. Detalhe Entradas (Itens)` (Detalhe por Item)
* **Download em .ZIP:** Se o processamento gerar relat√≥rios para mais de um CNPJ, a aplica√ß√£o os compacta automaticamente em um √∫nico arquivo `.zip` para download.

## üõ†Ô∏è Tecnologias Utilizadas

* **Python 3.10+**
* **Streamlit:** Para a cria√ß√£o da interface gr√°fica (GUI).
* **Pandas:** Para manipula√ß√£o e agrega√ß√£o dos dados.
* **Openpyxl:** Para a cria√ß√£o dos arquivos Excel (usado pelo Pandas).
* **Poetry:** Para gerenciamento de depend√™ncias e do ambiente virtual.
* **PyInstaller:** Para compilar o projeto em um arquivo execut√°vel (`.exe`) para distribui√ß√£o no Windows.

---

## üíª Como Rodar (Para Desenvolvedores)

Se voc√™ quiser rodar o projeto a partir do c√≥digo-fonte:

1.  **Clone o reposit√≥rio:**
    ```bash
    git clone [URL-DO-SEU-REPOSITORIO]
    cd [NOME-DA-PASTA-DO-PROJETO]
    ```

2.  **Instale as depend√™ncias com Poetry:**
    (Assumindo que voc√™ j√° tem o [Poetry](https://python-poetry.org/) instalado)
    ```bash
    poetry install
    ```

3.  **Execute a aplica√ß√£o:**
    Este projeto usa um script `run.py` para iniciar o servidor Streamlit em segundo plano e abrir o navegador.
    ```bash
    poetry run python run.py
    ```
    A aplica√ß√£o abrir√° automaticamente no seu navegador em `http://localhost:8501`.

## üì¶ Como Compilar (Gerar o `.exe`)

Para gerar o arquivo execut√°vel para distribui√ß√£o no Windows, usamos o `run.py` como ponto de entrada e adicionamos o `app.py` como um dado (para que o `run.py` possa encontr√°-lo).

```bash
poetry run pyinstaller --onefile --windowed --add-data "app.py;." run.py